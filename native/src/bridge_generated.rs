#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.65.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::aws::profile::AWSProfile;
use crate::aws::s3::S3Bucket;
use crate::aws::s3::S3GetObjectConfig;
use crate::aws::s3::S3Object;

// Section: wire functions

fn wire_get_aws_credential_impl(
    port_: MessagePort,
    profile: impl Wire2Api<AWSProfile> + UnwindSafe,
    mfa_code: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_aws_credential",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_profile = profile.wire2api();
            let api_mfa_code = mfa_code.wire2api();
            move |task_callback| get_aws_credential(api_profile, api_mfa_code)
        },
    )
}
fn wire_s3_list_buckets_impl(port_: MessagePort, profile: impl Wire2Api<AWSProfile> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "s3_list_buckets",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_profile = profile.wire2api();
            move |task_callback| s3_list_buckets(api_profile)
        },
    )
}
fn wire_s3_list_objects_impl(
    port_: MessagePort,
    profile: impl Wire2Api<AWSProfile> + UnwindSafe,
    bucket: impl Wire2Api<S3Bucket> + UnwindSafe,
    prefix: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "s3_list_objects",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_profile = profile.wire2api();
            let api_bucket = bucket.wire2api();
            let api_prefix = prefix.wire2api();
            move |task_callback| s3_list_objects(api_profile, api_bucket, api_prefix)
        },
    )
}
fn wire_s3_create_folder_impl(
    port_: MessagePort,
    profile: impl Wire2Api<AWSProfile> + UnwindSafe,
    bucket_name: impl Wire2Api<String> + UnwindSafe,
    prefix: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "s3_create_folder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_profile = profile.wire2api();
            let api_bucket_name = bucket_name.wire2api();
            let api_prefix = prefix.wire2api();
            move |task_callback| s3_create_folder(api_profile, api_bucket_name, api_prefix)
        },
    )
}
fn wire_s3_upload_file_impl(
    port_: MessagePort,
    profile: impl Wire2Api<AWSProfile> + UnwindSafe,
    bucket_name: impl Wire2Api<String> + UnwindSafe,
    prefix: impl Wire2Api<Option<String>> + UnwindSafe,
    file_path: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "s3_upload_file",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_profile = profile.wire2api();
            let api_bucket_name = bucket_name.wire2api();
            let api_prefix = prefix.wire2api();
            let api_file_path = file_path.wire2api();
            move |task_callback| {
                s3_upload_file(api_profile, api_bucket_name, api_prefix, api_file_path)
            }
        },
    )
}
fn wire_s3_delete_objects_impl(
    port_: MessagePort,
    profile: impl Wire2Api<AWSProfile> + UnwindSafe,
    bucket_name: impl Wire2Api<String> + UnwindSafe,
    prefixes: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "s3_delete_objects",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_profile = profile.wire2api();
            let api_bucket_name = bucket_name.wire2api();
            let api_prefixes = prefixes.wire2api();
            move |task_callback| s3_delete_objects(api_profile, api_bucket_name, api_prefixes)
        },
    )
}
fn wire_s3_get_objects_impl(
    port_: MessagePort,
    profile: impl Wire2Api<AWSProfile> + UnwindSafe,
    bucket_name: impl Wire2Api<String> + UnwindSafe,
    prefixes: impl Wire2Api<Vec<String>> + UnwindSafe,
    config: impl Wire2Api<S3GetObjectConfig> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "s3_get_objects",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_profile = profile.wire2api();
            let api_bucket_name = bucket_name.wire2api();
            let api_prefixes = prefixes.wire2api();
            let api_config = config.wire2api();
            move |task_callback| {
                s3_get_objects(api_profile, api_bucket_name, api_prefixes, api_config)
            }
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for AWSProfile {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.name.into_dart(),
            self.region.into_dart(),
            self.access_key_id.into_dart(),
            self.secret_access_key.into_dart(),
            self.session_token.into_dart(),
            self.mfa_serial.into_dart(),
            self.expiration.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AWSProfile {}

impl support::IntoDart for S3Bucket {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.name.into_dart(),
            self.created_at.into_dart(),
            self.location.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for S3Bucket {}

impl support::IntoDart for S3Object {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.key.into_dart(),
            self.last_modified.into_dart(),
            self.size.into_dart(),
            self.storage_class.into_dart(),
            self.is_folder.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for S3Object {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
